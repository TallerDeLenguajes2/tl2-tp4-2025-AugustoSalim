using System.Text.Json;
using MiCadeteria.Models;

namespace MiCadeteria.AccesoADatos
{
    public class AccesoADatosCadeteria
    {
        // üîí Ruta del archivo JSON donde se guardan los datos generales de la cadeter√≠a.
        // Se define como readonly porque no se va a cambiar en tiempo de ejecuci√≥n.
        private readonly string rutaArchivo = "Data/Cadeteria.json";

        // ‚úÖ M√©todo principal: obtiene la informaci√≥n de la cadeter√≠a desde el archivo JSON
        public Cadeteria Obtener()
        {
            // Si el archivo no existe, devolvemos una nueva Cadeteria vac√≠a.
            // Esto evita que el sistema se rompa la primera vez que corre.
            if (!File.Exists(rutaArchivo))
            {
                return new Cadeteria
                {
                    Nombre = "Cadeter√≠a Sin Datos",
                    Telefono = "000-0000"
                };
            }

            // Leemos el contenido del archivo en formato texto
            string json = File.ReadAllText(rutaArchivo);

            // Si est√° vac√≠o o mal escrito, devolvemos una Cadeteria gen√©rica
            if (string.IsNullOrWhiteSpace(json))
            {
                return new Cadeteria
                {
                    Nombre = "Cadeter√≠a Sin Datos",
                    Telefono = "000-0000"
                };
            }

            // Configuraci√≥n del deserializador JSON:
            // - PropertyNameCaseInsensitive = true  ‚Üí ignora may√∫sculas/min√∫sculas en los nombres de propiedades
            var opciones = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

            // Intentamos convertir el texto JSON a un objeto Cadeteria
            // Si algo falla, devolvemos una instancia vac√≠a como respaldo.
            return JsonSerializer.Deserialize<Cadeteria>(json, opciones) ?? new Cadeteria
            {
                Nombre = "Cadeter√≠a Sin Datos",
                Telefono = "000-0000"
            };
        }
    }
}
